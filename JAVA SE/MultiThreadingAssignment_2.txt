3) create 3 threads in such a way that while one thread is executing, 2 threads cannot interfere. they should display output "Exec  0" to "Exec 5".

public class Ass3 implements Runnable  //thread safe class
{
	synchronized public void run()
	{
		for(int i=0;i<6;i++)
		{	
			System.out.println("Exec"+i);
		}
	}
	public static void main(String args[])
	{
		Ass3 ob=new Ass3();
		Thread t1=new Thread(ob);
		Thread t2=new Thread(ob);
		Thread t3=new Thread(ob);
		t1.start();
		t2.start();
		t3.start();
	}
}

O/P:
Exec0
Exec1
Exec2
Exec3
Exec4
Exec5
Exec0
Exec1
Exec2
Exec3
Exec4
Exec5
Exec0
Exec1
Exec2
Exec3
Exec4
Exec5

4)create 2 threads. Write a program which displays number 1 to 10 using class lock. 
[hint:- use "implements Runnable" and synchronized block]

//4)create 2 threads. Write a program which displays number 1 to 10 using class lock. 
//[hint:- use "implements Runnable" and synchronized block]


public class MultiThread_4 implements Runnable
{
	 static Class cs;
	 static void disp1()
	 {
		synchronized(cs)
		{
		for(int i=1;i<=10;i++)
		{
			System.out.println(i);
		}
		}
	}
	public void run()   //as it is a non static function and we need object to call it so we need it 
	{
		disp1();
	}
	public static void main(String args[])throws Exception
	{
		cs=Class.forName("MultiThread_4");
		MultiThread_4 c=new MultiThread_4();
		MultiThread_4 c1=new MultiThread_4();
		MultiThread_4 c3=new MultiThread_4();
		Thread t1=new Thread(c);
		Thread t2=new Thread(c1);
		Thread t3=new Thread(c3);
		t1.start();
		t2.start();
		t3.start();
	}
}

O/P:
1
2
3
4
5
6
7
8
9
10
1
2
3
4
5
6
7
8
9
10
1
2
3
4
5
6
7
8
9
10


5] create 2 threads
	one thread will display 1 to 50
	second thread will display 50 to 1
both the threads should start simultaneously.
(use implements method)
public class MultiThread_5 implements Runnable
{
	public void run(){
	if((Thread.currentThread().getName()).equalsIgnoreCase("First")){
	for(int i =1;i<=50;i++){
		System.out.println(i);
		}
	}
	if((Thread.currentThread().getName()).equalsIgnoreCase("Second"))
	{
	for(int i =50;i>=1;i--){
	System.out.println(i);
	}
	}
	}
	public static void main(String []args){
		MultiThread_5 q = new MultiThread_5();
		Thread t1 =new Thread(q);
		Thread t2 =new Thread(q);
		t1.start();
		t2.start();
		t1.setName("First");
		t2.setName("Second");


}
}

O/P:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
50
49
48
47
46
45
44
43
42
41
40
39
38
37
36
35
34
33
32
31
30
29
28
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1


