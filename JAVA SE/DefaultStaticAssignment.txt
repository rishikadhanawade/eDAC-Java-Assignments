//1) define interface "First" with "default void fun()" and interface "Second" with "default void fun()". 
//Now derive a class Child from both these interfaces. 
//Inside main function instantiate Child class instance and invoke "fun" method.
interface First
{
	default void fun()
	{
		System.out.println("In fun() of First");
	}
}
interface Second
{
	default void fun()
	{
		System.out.println("In fun() of Second");
	}
}
class Child implements First,Second
{
	public void fun()
	{
		System.out.println("In fun() of Child");
	}
}
public class Question1 {

	public static void main(String[] args) {
		
		Child c1=new Child();
		c1.fun();
		
		

	}

}

}
//2) define interface "Third" with "default void disp1()" and "static void disp2()" methods.
//derive a class "Sub" from "Third" ( do not override "disp1")
//inside main function invoke "disp1" and "disp2" methods.

interface third
{
	default void disp1()
	{
		System.out.println("In disp1() of third");
	}
	static void disp2()
	{
		System.out.println("In disp2() of third");
	}
}
class Sub implements third
{
	
}
public class Question2 {

	public static void main(String[] args) {
		
		third.disp2();
		Sub s=new Sub();
		s.disp1();

	}

}


//3)define interface "Fourth" with "default void disp3()" method.
//define a class "Base1" with "public void disp3()" method,
//now derive a class Sub1 from "Base1" and "Fourth". Sub1 class should have only "public void myfun()" method.
//inside main create an object of "Sub1" and invoke "disp3".
//once you get the result, also try to invoke "disp3" of "Fourth"
interface Fourth
{
	default void disp3()
	{
		System.out.println("in disp3() of Fourth");
	}
}
class base1
{
	public void disp3()
	{
		System.out.println("in disp3() of base1");
	}
}
class sub1 extends base1 implements Fourth
{
	
	public void myfun()
	{
		Fourth.super.disp3();
		System.out.println("In myfun() of sub1");
	}
}
public class Question3{

	public static void main(String[] args) {
		sub1 s1=new sub1();
		s1.disp3();
		s1.myfun();
		
	}

}



interface A
{
	default void fun1()
	{
		System.out.println("In fun1() of Base1");
	}
}
interface B extends A
{
	default void fun2()
	{
		A.super.fun1();
		System.out.println("In fun2() of Sub1");
	}
}
class C1 implements B
{
	public void fun3()
	{
		B.super.fun2();
		System.out.println("In disp3() of Sub2");
	}
}


public class Question4 {

	public static void main(String[] args) {
		
		C1 s2=new C1();
		s2.fun3();

	}

}




//5) define interface "First" with "static void disp1()" method.
//class "Base" with "static void disp2()" method.
//derive a class "Sub" from "Base" and "First"
//now define a class Demo in which define "main" method.
//inside main show how many ways you can invoke "disp1" and "disp2" methods.
interface First1
{
	static void disp1()
	{
		System.out.println("in disp1() of First");
	}
}
class Base1
{
	static void disp2()
	{
		System.out.println("in disp3() of Base");
	}
}
class Sub1 extends Base1 implements First1
{
	
}
public class Question5 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Base1.disp2();
		First1.disp1();
		Sub1.disp2();
	}

}

